 CXX  src/main.cpp
src/main.cpp: In function 'bool saveToBmp(const char*, rpos::features::location_provider::Map)':
src/main.cpp:84:58: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for (size_t posY = 0; posY < map.getMapDimension().y(); ++posY)
                                                          ^
src/main.cpp:86:62: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for (size_t posX = 0; posX < map.getMapDimension().x(); ++posX)
                                                              ^
src/main.cpp: In function 'bool saveToTxt(const char*, rpos::features::location_provider::Map)':
src/main.cpp:110:99: warning: format '%lu' expects argument of type 'long unsigned int', but argument 3 has type 'Eigen::DenseCoeffsBase<Eigen::Matrix<int, 2, 1>, 1>::Scalar {aka int}' [-Wformat=]
     fprintf(fp, "Cell Dimension: %lu, %lu\n", map.getMapDimension().x(), map.getMapDimension().y());
                                                                                                   ^
src/main.cpp:110:99: warning: format '%lu' expects argument of type 'long unsigned int', but argument 4 has type 'Eigen::DenseCoeffsBase<Eigen::Matrix<int, 2, 1>, 1>::Scalar {aka int}' [-Wformat=]
src/main.cpp:113:58: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for (size_t posY = 0; posY < map.getMapDimension().y(); ++posY)
                                                          ^
src/main.cpp:115:62: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for (size_t posX = 0; posX < map.getMapDimension().x(); ++posX)
                                                              ^
src/main.cpp: In function 'void displayMapInfo(rpos::features::location_provider::Map)':
src/main.cpp:145:32: warning: format '%u' expects argument of type 'unsigned int', but argument 2 has type 'rpos::system::types::timestamp_t {aka long unsigned int}' [-Wformat=]
         , map.getMapTimestamp());
                                ^
 LD   /slamware/slamware_sdk_linux-x86_64-gcc4.8/linux-x86_64-release/output/getMap
/slamware/slamware_sdk_linux-x86_64-gcc4.8/linux-x86_64-release/lib/libcurl.a(libcurl_la-netrc.o): In function `Curl_parsenetrc':
netrc.c:(.text+0x362): warning: Using 'getpwuid' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
/slamware/slamware_sdk_linux-x86_64-gcc4.8/linux-x86_64-release/lib/librpos_robotplatforms_rpslamware.a(slamware_tcp_connection.o): In function `boost::asio::detail::resolve_op<boost::asio::ip::tcp, boost::_bi::bind_t<void, boost::_mfi::mf2<void, rpos::system::util::TcpClient<rpos::robot_platforms::detail::SlamwareTcpConnectionHandler, 1024000>, boost::system::error_code const&, boost::asio::ip::basic_resolver_iterator<boost::asio::ip::tcp> >, boost::_bi::list3<boost::_bi::value<boost::shared_ptr<rpos::system::util::TcpClient<rpos::robot_platforms::detail::SlamwareTcpConnectionHandler, 1024000> > >, boost::arg<1>, boost::arg<2> > > >::do_complete(boost::asio::detail::task_io_service*, boost::asio::detail::task_io_service_operation*, boost::system::error_code const&, unsigned long)':
slamware_tcp_connection.cpp:(.text._ZN5boost4asio6detail10resolve_opINS0_2ip3tcpENS_3_bi6bind_tIvNS_4_mfi3mf2IvN4rpos6system4util9TcpClientINS9_15robot_platforms6detail28SlamwareTcpConnectionHandlerELi1024000EEERKNS_6system10error_codeENS3_23basic_resolver_iteratorIS4_EEEENS5_5list3INS5_5valueINS_10shared_ptrISG_EEEENS_3argILi1EEENST_ILi2EEEEEEEE11do_completeEPNS1_15task_io_serviceEPNS1_25task_io_service_operationESK_m[_ZN5boost4asio6detail10resolve_opINS0_2ip3tcpENS_3_bi6bind_tIvNS_4_mfi3mf2IvN4rpos6system4util9TcpClientINS9_15robot_platforms6detail28SlamwareTcpConnectionHandlerELi1024000EEERKNS_6system10error_codeENS3_23basic_resolver_iteratorIS4_EEEENS5_5list3INS5_5valueINS_10shared_ptrISG_EEEENS_3argILi1EEENST_ILi2EEEEEEEE11do_completeEPNS1_15task_io_serviceEPNS1_25task_io_service_operationESK_m]+0xbd): warning: Using 'getaddrinfo' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
